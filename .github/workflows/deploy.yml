name: Deploy

on:
  workflow_call:
    inputs:
      version:
        description: '部署版本'
        default: 'master'
        type: string
    secrets:
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true
      SSH_KEY:
        required: true
      SSH_PORT:
        required: true
      GHCR_READ_TOKEN:
        required: true
      DYUPS_SERVER:
        required: true
      DYUPS_TOKEN:
        required: true
      GHCR_MIRROR:
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: '部署版本'
        default: 'master'
        type: string

env:
  REPO: ${{ github.repository }}
  IMAGE_VERSION: ${{ inputs.version || github.event.inputs.version }}
  MIRROR_REPOSITORY_TAG: ${{ secrets.GHCR_MIRROR }}/${{ github.repository }}:${{ inputs.version || github.event.inputs.version }}
  OWNER: xuexb
  CONTAINER_NAME: echo.xuexb.com
  DYUPS_DOMAIN: echo.xuexb.com

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check_version.outputs.HTTP_CODE }}
    steps:
      - name: Generate Token
        id: generate_token
        run: |
          TOKEN=`curl -su ${{ env.OWNER }}:${{ secrets.GHCR_READ_TOKEN }} https://ghcr.io/token\?scope\="repository:${{ env.REPO }}:pull" | awk -F '"' '{print $4}'`
          echo "::set-output name=GHCR_PULL_TOKEN::$TOKEN"
      - name: Check version
        id: check_version
        if: ${{ steps.generate_token.conclusion == 'success' }}
        run: |
          HTTP_CODE=`curl -sL -w '%{http_code}' --connect-timeout 5 -H 'Authorization: Bearer ${{ steps.generate_token.outputs.GHCR_PULL_TOKEN }}' https://ghcr.io/v2/${{ env.REPO }}/manifests/${{ env.IMAGE_VERSION }} -o /dev/null`
          if [ "$HTTP_CODE" == "200" ]; then
            echo "::set-output name=HTTP_CODE::$HTTP_CODE"
          else
            echo "curl https://ghcr.io/v2/${{ env.REPO }}/manifests/${{ env.IMAGE_VERSION }} Response => $HTTP_CODE"
            exit 1
          fi
  deploy:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ needs.check-version.outputs.result == '200' }}
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          command_timeout: 30m
          script: |
            docker pull ${{ env.MIRROR_REPOSITORY_TAG }} \
              && docker ps -aq --filter "name=${{ env.CONTAINER_NAME }}" | xargs docker rm -f || echo "Delete fail" \
              && docker run \
                -p 8080 \
                --rm \
                -d \
                --name "${{ env.CONTAINER_NAME }}" \
                ${{ env.MIRROR_REPOSITORY_TAG }}
  dyups:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    steps:
      - name: Regist dyups
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          command_timeout: 30m
          script: |
            port=`docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "{{.Ports}}" -a | awk -F ":" '{print $2}' | awk -F "->" '{print $1}'`
            if [ "$port" == "" ]; then
              echo "未找到容器暴露端口"
              exit 1
            fi

            # 检查容器运行状态
            httpcode=`curl -sL -w '%{http_code}' --connect-timeout 3 "127.0.0.1:$port/?r=$RANDOM" -o /dev/null`
            if [ "$httpcode" != "200" ]; then
              echo "容器运行错误"
              exit 1
            fi

            # 注册 dyups
            dyupsurl="${{ secrets.DYUPS_SERVER }}/api/${{ env.DYUPS_DOMAIN }}?r=$RANDOM"
            httpcode=`curl -sL -w '%{http_code}' -H 'x-dyups-token: ${{ secrets.DYUPS_TOKEN }}' -X POST -d "[{\"address\":\"${{ secrets.SSH_HOST }}\",\"port\":$port}]" --connect-timeout 3 $dyupsurl -o /dev/null`
            if [ "$httpcode" != "200" ]; then
              echo "注册 dyups 失败"
              exit 1
            fi

            # 同步 dyups
            dyupsurl="${{ secrets.DYUPS_SERVER }}/api/sync?r=$RANDOM"
            httpcode=`curl -sL -w '%{http_code}' -H 'x-dyups-token: ${{ secrets.DYUPS_TOKEN }}' --connect-timeout 3 $dyupsurl -o /dev/null`
            if [ "$httpcode" != "200" ]; then
              echo "同步 dyups 失败"
              exit 1
            fi
  test:
    runs-on: ubuntu-latest
    needs: dyups
    if: ${{ needs.dyups.result == 'success' }}
    steps:
      - name: Test
        run: |
          httpcode=`curl -sL -w '%{http_code}' --connect-timeout 3 https://${{ env.DYUPS_DOMAIN }} -o /dev/null`
          if [ "$httpcode" != "200" ]; then
            echo "访问 dyups WLB 错误"
            exit 1
          fi